"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path
import environ
from django.core.exceptions import ImproperlyConfigured
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

env = environ.Env()
environ.Env.read_env()
env_file = os.path.join(BASE_DIR, 'environments/.env.debug')
if os.path.exists(env_file):
    environ.Env.read_env(env_file)
else:
    print(f"Advertencia: Archivo de entorno '{env_file}' no encontrado. Usando valores por defecto.")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-+(630u(8p2$0u%jio&!10ghwgdj@p(q+g%^^b9zebn@pqnz(j6'
# ==================================================================================
# ==================================================================================
# --- Django Cryptography ---
# ¡MUY IMPORTANTE! Usa una variable de entorno en producción.
# Genera una clave segura (puedes usar Fernet.generate_key() de la librería cryptography)
# Ejemplo: python -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())"
CRYPTOGRAPHY_KEY = os.environ.get('DJANGO_CRYPTOGRAPHY_KEY', 'django-insecure-+(630u(8p2$0u%jio&!10ghwgdj@p(q+g%^^b9zebn@pqnz(j6') # ¡CAMBIA ESTO!
# ==================================================================================
# ==================================================================================


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

AUTH_USER_MODEL = 'base.User'

# Application definition

DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'django.contrib.sites',  # Para django-allauth
]
LOCAL_APPS = [
    'apps.audit',
    'apps.base',
    'apps.third_party',
    'apps.accounting',
    'apps.dashboard',
    'apps.evaluations',
    'apps.payments.apps.PaymentsConfig',  # Ruta completa a la clase de configuración
    'apps.notifications',

    # 'apps.chatbot',

]
# Aplicación de pagos opcional

THIRD_APPS = [
    'rest_framework',
    # 'rest_framework.authtoken',
    # 'rest_framework_simplejwt',
    'corsheaders',
    # 'drf_yasg',
    'django_filters',
    'django_cryptography',
    # 'storages',
    'crispy_forms',
    'crispy_bootstrap5',
    'django_celery_beat',
    'django_celery_results',
]

INSTALLED_APPS = DJANGO_APPS + LOCAL_APPS + THIRD_APPS
try:
    import payments
    INSTALLED_APPS.append('payments')
    PAYMENTS_ENABLED = True
except ImportError:
    PAYMENTS_ENABLED = False
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'apps.audit.middleware.AuditMiddleware', #debe estar despues de la autenticacion
    'apps.base.models.middleware.CurrentUserMiddleware', #Se usa para obtener el usuario actual en BaseModel
    'django.middleware.locale.LocaleMiddleware', # Se agrego para poder realizar el cambio de thema {% load i18n %}
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

]
# se genera al auditoria de esta forma para no modificar los models ya creados 
AUDIT_MODELS = [
    # Modelos base
    'base.User',
    'base.UserProfile',
    'base.Menu',
    'base.MenuItem',
    'base.Company',
    'base.DocType',
    'base.Periodicity',
    'base.ThemeType',
    # Modelos de soporte
    'base.City',
    'base.Country',
    'base.State',
    'base.Gender',
    'base.AttachmentType',
    'base.PaymentMethod',
    'base.ContractType',
    'base.JobType',
    # Modelos adicionales de recursos humanos
    'base.EPS',
    'base.ARL',
    'base.PensionFound',
    'base.NoveltyType',
    'base.RetirementType',
    
    # Notifiacaciones
    'notifications.EmailConfiguration',
    'notifications.SMSConfiguration',
    'notifications.WhatsAppConfiguration',

    # Terceros
    'third_party.ThirdPartyType',
    'third_party.ThirdParty',
    'third_party.ThirdPartyAttachment',

    # Chat
    # 'chatbot.ChatUser',
    # 'chatbot.Conversation',
    # 'chatbot.Message',
    # 'chatbot.Intent',
    # 'chatbot.Response',
    # 'chatbot.Feedback',
    # 'chatbot.KnowledgeBase',

    
    
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'config.processors.sidebarProcessor.sidebar_context',
                # 'apps.base.context_processors.payments_enabled',  # Procesador de contexto personalizado

            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# Configuración por defecto (puede ser sobrescrita por el modelo)
EMAIL_BACKEND = 'apps.notifications.backend.email_backend.DatabaseEmailBackend'
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.hostinger.com'
# EMAIL_PORT = 465
# EMAIL_HOST_USER = 'info@innosmart.com.co'
# EMAIL_HOST_PASSWORD = 'InnoSmart2025*'
# EMAIL_USE_TLS = True

# For storing emails when using file backend
# EMAIL_FILE_PATH = os.path.join(BASE_DIR, 'sent_emails')

# # Admin email for notifications
# ADMIN_EMAIL = 'admin@example.com'
# SITE_NAME = 'My Website'

# # Custom logging for messaging
# settings.py

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose', # O 'simple'
        },
        # Puedes añadir 'file' handlers para guardar logs en archivos
        # 'file': {
        #     'level': 'INFO',
        #     'class': 'logging.FileHandler',
        #     'filename': BASE_DIR / 'logs/django.log', # Asegúrate de que el directorio exista
        #     'formatter': 'verbose',
        # },
    },
    'loggers': {
        'django': {
            'handlers': ['console'], # Añade 'file' si lo configuras
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'), # INFO en prod, DEBUG en dev
            'propagate': True,
        },
        'notifications': { # Logger para tu app
            'handlers': ['console'],
            'level': 'DEBUG', # Ajusta según necesites
            'propagate': False, # Evita que se dupliquen logs si django logger también lo captura
        },
        'celery': { # Logger para Celery
            'handlers': ['console'],
            'level': 'INFO', # O DEBUG para más detalle
            'propagate': True,
        },
    },
}

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
CORS_ALLOWED_ORIGINS = env.list('CORS_ALLOWED_ORIGINS', default=["http://localhost:4200"])

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"  # Para Bootstrap 5
CRISPY_TEMPLATE_PACK = "bootstrap5" 

# Configuracion de login
# URL a la que se redirige después del login (si no hay next)
LOGIN_REDIRECT_URL = 'configuracion:Userslist'

# URL a la que se redirige después del logout
LOGOUT_REDIRECT_URL = 'auth:login'

LOGIN_URL = 'auth:login'

# Tiempo de duración por defecto de las sesiones (2 semanas)
SESSION_COOKIE_AGE = 1209600

# Backend de autenticación
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]
SITE_ID = 1
PAYMENT_HOST = 'http://localhost:8000'  # Para desarrollo local
# PAYMENT_HOST = 'https://midominio.com'  # Para producción

# Configuración de mensajes
MESSAGE_STORAGE = 'django.contrib.messages.storage.cookie.CookieStorage'

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'es-co'

TIME_ZONE = 'America/Bogota'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [BASE_DIR / 'static']

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# --- Celery Configuration ---
# Broker URL (Ejemplo con Redis, ajusta según tu broker: RabbitMQ, etc.)
# ¡Usa variables de entorno para producción!
CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL', 'redis://localhost:6379/0')

# Result Backend (Donde Celery almacena los estados y resultados de las tareas)
# Opción 1: Usar la base de datos de Django (requiere django-celery-results)
# Asegúrate de añadir 'django_celery_results' a INSTALLED_APPS
# y ejecutar migraciones.
CELERY_RESULT_BACKEND = 'django-db'
# CELERY_CACHE_BACKEND = 'django-cache' # Opcional, para cachear resultados

# Opción 2: Usar Redis (si ya lo usas como broker)
# CELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND', 'redis://localhost:6379/1')

# Acepta contenido JSON para tareas y resultados (recomendado)
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

# Zona horaria (importante para tareas programadas)
# Asegúrate de que coincida con la TIME_ZONE de Django
CELERY_TIMEZONE = TIME_ZONE # Hereda de la configuración de Django

# Guarda el estado 'STARTED' de las tareas (útil para seguimiento)
CELERY_TASK_TRACK_STARTED = True

# --- Celery Beat Configuration (SOLO si usas ScheduledMessage con DatabaseScheduler) ---
# Asegúrate de añadir 'django_celery_beat' a INSTALLED_APPS
# y ejecutar sus migraciones.
# CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'